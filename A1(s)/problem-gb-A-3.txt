---------
A-3 Loops
---------

        Compile the following program (file A-3.c) and observe the dumps.

	Source file : A-3.c
	Compilation : gcc-4.7.2 -c -fdump-tree-cfg A-3.c
	View result : vi -O A-3.c A-3.c.*.cfg
	Clear dumps : rm -f A-3.c.* A-3.o

Program
-------

        int main()
        {
    	    int sum = 0;
    	    int i, j;
    
    	    while(sum < 100) {
    		    sum = sum * 2;
    	    }
    
    	    for(i=0; i<25; i++) {
    		    for(j=0; j<50; j++) {
    			    sum = sum + i*j;
    		    }
    	    }
        }

Questions
---------

        1   Identify the basic blocks that correspond  to the while loop. How is
            the GIMPLE for a while loop different from simple if-else jumps?
            Ans : The labels bb3 and bb4 correspond the while loop.
            The sum is initialized inside bb2 label and the control is transferred 
            to bb4. The bb4 is a conditional label which decides the control transfer
            depending on condition. Until the condition is false, the control is transferred to
            and from bb3 which is the main processing block. The difference here is the bb2 block
            which prevents the unconditional iteration.

        2   Identify the  basic blocks  for the nested  for-loop. You  should be
            able  to identify  intializers, conditions  and increments  for each
            loop as  well as  the shared  inner body.  Is there  really anything
            special about a for-loop as compared to a while-loop?
            Ans : bb5 label - initialisation of i (outer loop).
            bb10 label - condition testing label (i<25)
            bb6 - initialisation of j (inner loop)
            bb8 - conditional checking (j<50)
            bb7 - block of code under inner loop and increment of j
            bb9 - increment of i
            Yes, there are three labels which are used for initialisation, condition checking\
            and increment. Rest is same like while loop.

